<div id="graph-container" style="width: 100%; height: 400px; position: relative;">
  <div id="3d-graph" style="width: 100%; height: 100%;"></div>
  <div id="infobox" style="position: absolute; bottom: 10px; right: 10px; background-color: white; padding: 10px; border: 1px solid black; display: none; width: 200px; word-wrap: break-word;"></div>
</div>

<script src="https://unpkg.com/3d-force-graph"></script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    const GROUP_COLORS = [
      '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
      '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
      '#393b79', '#5254a3'
    ];

    fetch('graphData2.json')
      .then(response => response.json())
      .then(gData => {
        gData.nodes.forEach(node => {
          if (!node.group) {
            node.group = Math.ceil(Math.random() * GROUP_COLORS.length);
          }
        });

        const graphContainer = document.getElementById('graph-container');
        const graph = document.getElementById('3d-graph');
        const infobox = document.getElementById('infobox');

        const Graph = ForceGraph3D()(graph)
          .graphData(gData)
          .showNavInfo(false)
          .nodeLabel(d => `<span style="color: black">${d.id}</span>`)
          .backgroundColor(`rgba(255,255, 255, 0.8)`)
          .width(graphContainer.clientWidth)
          .height(graphContainer.clientHeight)
          .linkWidth(0.1)
          .linkDirectionalParticles("value")
          .linkDirectionalParticleWidth(d => d.value / 50)
          .linkDirectionalParticleSpeed(d => Math.pow(d.value, 0.003))
          .nodeAutoColorBy("group")
          .nodeOpacity(0.9)
          .nodeRelSize(2) // Default node size
          .cameraPosition({ z: 300 }) // Default camera position
          .onNodeHover(node => {
            if (node) {
              infobox.innerHTML = `<strong>${node.id}</strong>: ${node.definition || 'No definition available'}`;
              infobox.style.display = 'block';
            } else {
              infobox.style.display = 'none';
            }
          });

        // Optional: Add window resize listener to adjust graph size dynamically
        window.addEventListener('resize', () => {
          Graph.width(graphContainer.clientWidth).height(graphContainer.clientHeight);
        });

        // Initial resize to fit the container
        Graph.width(graphContainer.clientWidth).height(graphContainer.clientHeight);

        // Control Buttons
        document.querySelector('#reset-view').addEventListener('click', () => {
          Graph.zoomToFit(1000);
        });

        document.querySelector('#toggle-force').addEventListener('click', () => {
          Graph.d3Force('charge').strength(-120);
          Graph.cooldownTicks(0);
          Graph.d3ReheatSimulation();
        });

        // Camera Position Controls
        document.querySelector('#top-view').addEventListener('click', () => {
          Graph.cameraPosition({ x: 0, y: 0, z: 300 }, { x: 0, y: 0, z: 0 }, 1000);
        });

        document.querySelector('#side-view').addEventListener('click', () => {
          Graph.cameraPosition({ x: 300, y: 0, z: 0 }, { x: 0, y: 0, z: 0 }, 1000);
        });

        document.querySelector('#front-view').addEventListener('click', () => {
          Graph.cameraPosition({ x: 0, y: 300, z: 0 }, { x: 0, y: 0, z: 0 }, 1000);
        });

        // Node Size Control
        document.querySelector('#nodeRelSize').addEventListener('input', (event) => {
          Graph.nodeRelSize(Number(event.target.value));
        });
      })
      .catch(error => console.error('Error fetching graph data:', error));
  });
</script>

<div class='buttons'>
    <button id="reset-view">Reset View</button>
    <button id="toggle-force">Force</button>
    <button id="top-view">Top View</button>
    <button id="side-view">Side View</button>
    <button id="front-view">Front View</button>
</div>

<div class='sliders'>
    <label for="nodeRelSize">Node Size:</label>
    <input
        type="range"
        id="nodeRelSize"
        name="nodeRelSize"
        min="1"
        max="20"
        value="2"
    />
    <span id="nodeSizeValue">2</span>
</div>